Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

Example 1:
     0          3
     |          |
     1 --- 2    4
Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], return 2.

Example 2:
     0           4
     |           |
     1 --- 2 --- 3
Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]], return 1.

Note:
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

class Solution {
    public int countComponents(int n, int[][] edges) {
        int[] nums = new int[n];
        Arrays.fill(nums, -1);
        for (int[] edge : edges) {
            int x = findParent(nums, edge[0]);
            int y = findParent(nums, edge[1]);
            if (x != y) {                          // x != y,  seperate write
                nums[x] = y;
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == -1) count++;
        }
        return count;
    }
    
    public int findParent(int[] nums, int num) {
        while (nums[num] != -1) {
            num = nums[num];
        }                                          //try not to use recursion, stack overflow
        return num;
    }
}